rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    // Core rules for collections
    match /{document=**} {
      allow read, write: if false;  // Deny by default
    }

    function isAuthenticated() {
      return request.auth != null;
    }

    function isValidEmail() {
      return request.auth.token.email.matches('^[^@]+@[^@]+\\.[^@]+$');
    }

    function isAdmin() {
      return isAuthenticated() &&
        exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }

    function isPractitioner() {
      return isAuthenticated() &&
        exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'practitioner';
    }

    function isEntrepreneur() {
      return isAuthenticated() &&
        exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'entrepreneur';
    }

    function isInstructor() {
      return isAuthenticated() &&
        exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'instructor';
    }

    function isOwner(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }

    // Regras para usuários
    match /users/{userId} {
      allow read: if isAuthenticated();
      allow write: if isOwner(userId) || isAdmin();
    }

    // Regras para atividades
    match /activities/{activityId} {
      allow read: if true;
      allow create: if isInstructor() || isEntrepreneur();
      allow update: if isAuthenticated() && (
        (resource.data.instructorId == request.auth.uid) ||
        (isAdmin()) ||
        (request.resource.data.diff(resource.data).affectedKeys().hasOnly(['enrolledStudents', 'currentParticipants', 'updatedAt']))
      );
      allow delete: if resource.data.instructorId == request.auth.uid || isAdmin();
    }

    // Regras para matrículas
    match /enrollments/{enrollmentId} {
      allow read: if isAuthenticated() && (
        resource.data.studentId == request.auth.uid ||
        resource.data.instructorId == request.auth.uid ||
        isAdmin()
      );
      allow create: if isAuthenticated();
      allow update: if isAuthenticated() && (
        resource.data.studentId == request.auth.uid ||
        resource.data.instructorId == request.auth.uid ||
        isAdmin()
      );
      allow delete: if isAuthenticated() && (
        resource.data.studentId == request.auth.uid ||
        resource.data.instructorId == request.auth.uid ||
        isAdmin()
      );
    }

    // Regras para pagamentos
    match /payments/{paymentId} {
      allow read: if isAuthenticated() && (
        resource.data.studentId == request.auth.uid ||
        resource.data.instructorId == request.auth.uid ||
        isAdmin()
      );
      allow create: if isAuthenticated() && request.resource.data.studentId == request.auth.uid;
      allow update: if isAuthenticated() && (
        resource.data.studentId == request.auth.uid ||
        resource.data.instructorId == request.auth.uid ||
        isAdmin()
      );
      allow delete: if isAuthenticated() && (
        resource.data.studentId == request.auth.uid ||
        resource.data.instructorId == request.auth.uid ||
        isAdmin()
      ) && resource.data.status == 'pending';
    }
  }
}
