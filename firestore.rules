rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {    // Core rules for collections
    match /{document=**} {
      allow read, write: if false;  // Deny by default
    }

    // Special access for development environment
    // TODO: Remove this rule in production
    // match /{document=**} {
    //   allow read, write: if true;
    // }
    // Funções auxiliares
    function isAuthenticated() {
      return request.auth != null;
    }
    
    function isAdmin() {
      return isAuthenticated() && 
        exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }
    
    function isPractitioner() {
      return isAuthenticated() && 
        exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'practitioner';
    }
    
    function isEntrepreneur() {
      return isAuthenticated() && 
        exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'entrepreneur';
    }
    
    function isInstructor() {
      return isAuthenticated() && 
        exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'instructor';
    }
    
    function isOwner(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }
    
    function isActivityOwner(activityData) {
      return isAuthenticated() && activityData.entrepreneurId == request.auth.uid;
    }

    // Regras para usuários
    match /users/{userId} {
      allow read: if true;
      allow list: if isAdmin();
      allow create: if true;
      allow update: if isAuthenticated() && (isOwner(userId) || isAdmin());
      allow delete: if isAdmin();
    }

    // Regras para empreendedores
    match /entrepreneurs/{entrepreneurId} {
      allow read: if true;
      allow list: if true;
      allow create: if isAuthenticated() && request.resource.data.userId == request.auth.uid;
      allow update: if isAuthenticated() && (
        isOwner(resource.data.userId) || 
        isAdmin()
      );
      allow delete: if isAdmin();
    }

    // Regras para atividades
    match /activities/{activityId} {
      allow read: if true;
      allow list: if true;
      allow create: if isAuthenticated() && isEntrepreneur();
      allow update: if isAuthenticated() && (
        isActivityOwner(resource.data) || 
        isAdmin()
      );
      allow delete: if isAuthenticated() && (
        isActivityOwner(resource.data) || 
        isAdmin()
      );
    }

    // Regras para matrículas
    match /enrollments/{enrollmentId} {
      allow create: if isAuthenticated();
      allow read: if isAuthenticated() && (
        isAdmin() || 
        isInstructor() && resource.data.instructorId == request.auth.uid ||
        resource.data.studentId == request.auth.uid
      );
      allow list: if isAuthenticated() && (
        isAdmin() || 
        isInstructor() && resource.data.instructorId == request.auth.uid ||
        resource.data.studentId == request.auth.uid
      );
      allow update: if isAuthenticated() && (
        isAdmin() ||
        isInstructor() && resource.data.instructorId == request.auth.uid ||
        resource.data.studentId == request.auth.uid && 
        request.resource.data.diff(resource.data).affectedKeys()
          .hasOnly(['status', 'studentNotes'])
      );
      allow delete: if isAdmin();
    }

    // Regras para transações financeiras
    match /transactions/{transactionId} {
      allow create: if isAuthenticated() && (isAdmin() || isInstructor());
      allow read: if isAuthenticated() && (
        isAdmin() ||
        isInstructor() && resource.data.instructorId == request.auth.uid ||
        resource.data.userId == request.auth.uid
      );
      allow list: if isAuthenticated() && (
        isAdmin() ||
        isInstructor() && resource.data.instructorId == request.auth.uid ||
        resource.data.userId == request.auth.uid
      );
      allow update: if isAuthenticated() && (
        isAdmin() ||
        isInstructor() && resource.data.instructorId == request.auth.uid
      );
      allow delete: if isAdmin();
    }

    // Regras para reservas/agendamentos
    match /bookings/{bookingId} {
      allow read: if isAuthenticated() && (
        resource.data.practitionerId == request.auth.uid || 
        resource.data.entrepreneurId == request.auth.uid || 
        isAdmin()
      );
      
      allow list: if isAuthenticated() && (
        request.query.limit <= 100 && (
          // Praticante listando suas próprias reservas
          (request.query.filters[0].field_path == "practitionerId" && 
           request.query.filters[0].op == "==" && 
           request.query.filters[0].value == request.auth.uid) ||
          // Empreendedor listando reservas para suas atividades
          (request.query.filters[0].field_path == "entrepreneurId" && 
           request.query.filters[0].op == "==" && 
           request.query.filters[0].value == request.auth.uid) ||
          // Admin pode listar todas
          isAdmin()
        )
      );
      
      allow create: if isAuthenticated() && isPractitioner() && request.resource.data.practitionerId == request.auth.uid;
      allow update: if isAuthenticated() && (
        resource.data.practitionerId == request.auth.uid ||
        resource.data.entrepreneurId == request.auth.uid ||
        isAdmin()
      );
      allow delete: if isAuthenticated() && (isAdmin() || resource.data.practitionerId == request.auth.uid);
    }

    // Regras para avaliações
    match /reviews/{reviewId} {
      allow read: if true;
      allow list: if true;
      allow create: if isAuthenticated() && isPractitioner() && request.resource.data.practitionerId == request.auth.uid;
      allow update: if isAuthenticated() && (
        resource.data.practitionerId == request.auth.uid || 
        isAdmin()
      );
      allow delete: if isAuthenticated() && (
        resource.data.practitionerId == request.auth.uid || 
        isAdmin()
      );
    }

    // Regras para praias
    match /beaches/{beachId} {
      allow read: if true;
      allow list: if true;
      allow create, update, delete: if isAdmin();
    }

    // Regras para favoritos
    match /favorites/{favoriteId} {
      allow read: if isAuthenticated() && resource.data.practitionerId == request.auth.uid;
      allow list: if isAuthenticated() && 
        request.query.limit <= 100 && 
        request.query.filters[0].field_path == "practitionerId" && 
        request.query.filters[0].op == "==" && 
        request.query.filters[0].value == request.auth.uid;
      allow create: if isAuthenticated() && isPractitioner() && request.resource.data.practitionerId == request.auth.uid;
      allow update: if isAuthenticated() && resource.data.practitionerId == request.auth.uid;
      allow delete: if isAuthenticated() && resource.data.practitionerId == request.auth.uid;
    }
  }
}